package com.vaadin.integration.eclipse.maven;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;

import org.apache.maven.model.Build;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.MojoExecution;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.Scanner;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.m2e.core.MavenPlugin;
import org.eclipse.m2e.core.embedder.IMaven;
import org.eclipse.m2e.core.project.configurator.MojoExecutionBuildParticipant;
import org.sonatype.plexus.build.incremental.BuildContext;

/**
 * An m2e build participant that automatically triggers the execution of
 * appropriate vaadin-maven-plugin goals on resource changes (Eclipse builds)
 * and refreshes possibly changed resources after each mojo execution.
 * 
 * This class is called once for every Vaadin mojo execution in a build.
 * 
 * The POM file in the project can override the use of the configurator that
 * triggers this build participant either by omitting an execution entry to
 * disable this or by explicitly defining another action for one or more of the
 * goals in the m2e configuration in the pluginManagement section.
 */
public class VaadinMojoExecutionBuildParticipant
    extends MojoExecutionBuildParticipant
{
    private static final String UPDATE_THEME_GOAL = "update-theme";
    private static final String COMPILE_THEME_GOAL = "compile-theme";
    private static final String UPDATE_WIDGETSET_GOAL = "update-widgetset";

    private static final String RELATIVE_THEME_DIRECTORY = "VAADIN/themes";
    private static final String GENERATED_WIDGETSET_DIRECTORY_PARAMETER = "generatedWidgetsetDirectory";

    private static final IMaven maven = MavenPlugin.getMaven();

    public VaadinMojoExecutionBuildParticipant( MojoExecution execution )
    {
        super( execution, true );
    }

    @Override
    public Set<IProject> build( int kind, IProgressMonitor monitor )
        throws Exception
    {
        BuildContext buildContext = getBuildContext();

        // skip executing the goal if no relevant files have changed
        if (!appliesToGoal(kind, buildContext, monitor)) {
            return null;
        }

        // execute mojo
        Set<IProject> result = super.build(kind, monitor);

        // refresh files generated by the mojo
        refreshTarget(buildContext, monitor);

        return result;
    }

    private boolean appliesToGoal(int kind, BuildContext buildContext,
            IProgressMonitor monitor) throws CoreException {
        if (isGoal(UPDATE_THEME_GOAL) || isGoal(COMPILE_THEME_GOAL)) {
            for (File themeDir : getThemeDirectories(monitor)) {
                if (themeDir.exists()
                        && scanDirectory(buildContext, themeDir, null)) {
                    return true;
                }
            }
            return false;
        } else if (isGoal(UPDATE_WIDGETSET_GOAL)) {
            // a full build may have dependency changes
            if (kind == FULL_BUILD || kind == PRECONFIGURE_BUILD) {
                return true;
            }
            // trigger if dependencies change - other cases below
            if (kind == AUTO_BUILD) {
                if (buildContext.hasDelta("pom.xml")) {
                    return true;
                }
            }
            // otherwise, only scan for changes in .gwt.xml files
            for (File resourceDir : getUpdateWidgetsetTriggerDirectories(monitor)) {
                if (resourceDir.exists()
                        && scanDirectory(buildContext, resourceDir,
                                "**/*.gwt.xml")) {
                    return true;
                }
            }
            return false;
        }

        // no changes that we know should trigger a build => don't trigger one
        return false;
    }

    private boolean scanDirectory(BuildContext buildContext, File source,
            String filter) {
        // scan the source directory for applicable files
        Scanner ds = buildContext.newScanner(source); // delta or full
        if (filter != null) {
            ds.setIncludes(new String[] { filter });
        }
        ds.scan();
        String[] includedFiles = ds.getIncludedFiles();
        if (includedFiles == null || includedFiles.length <= 0) {
            return false;
        }
        return true;
    }

    private boolean isGoal(String goal) {
        return goal.equals(getMojoExecution().getGoal());
    }

    private void refreshTarget(BuildContext buildContext,
            IProgressMonitor monitor)
            throws CoreException {
        if (isGoal(UPDATE_THEME_GOAL) || isGoal(COMPILE_THEME_GOAL)) {
            for (File themeDir : getThemeDirectories(monitor)) {
                if (themeDir != null && themeDir.exists()) {
                    buildContext.refresh(themeDir);
                }
            }
        } else if (isGoal(UPDATE_WIDGETSET_GOAL)) {
            // refresh locations where the updated widgetset might have been
            // written
            for (File refreshable : getUpdateWidgetsetRefreshables(monitor)) {
                if (refreshable != null && refreshable.exists()) {
                    buildContext.refresh(refreshable);
                }
            }
        }
    }

    private Collection<File> getThemeDirectories(IProgressMonitor monitor)
            throws CoreException {
        ArrayList<File> result = new ArrayList<File>();

        MavenProject project = getMavenProject(monitor);
        File basedir = project.getBasedir();
        Build build = project.getBuild();

        result.add(new File(basedir, "src/main/webapp/"
                + RELATIVE_THEME_DIRECTORY));
        for (Resource resource : build.getResources()) {
            result.add(new File(resource.getDirectory(),
                    RELATIVE_THEME_DIRECTORY));
        }
        result.add(new File(build.getSourceDirectory(),
                RELATIVE_THEME_DIRECTORY));

        return result;
    }

    private Collection<File> getUpdateWidgetsetTriggerDirectories(
            IProgressMonitor monitor) throws CoreException {
        ArrayList<File> result = new ArrayList<File>();

        MavenProject project = getMavenProject(monitor);
        Build build = project.getBuild();

        result.add(new File(build.getSourceDirectory()));
        for (Resource resource : build.getResources()) {
            result.add(new File(resource.getDirectory(), ""));
        }

        return result;
    }

    private Collection<File> getUpdateWidgetsetRefreshables(
            IProgressMonitor monitor) throws CoreException {
        Collection<File> result = getUpdateWidgetsetTriggerDirectories(monitor);

        File generatedWidgetsetDirectory = getMojoParameterValue(
                GENERATED_WIDGETSET_DIRECTORY_PARAMETER, File.class, monitor);
        if (generatedWidgetsetDirectory != null
                && generatedWidgetsetDirectory.exists()) {
            result.add(generatedWidgetsetDirectory);
        }

        return result;
    }

    private MavenProject getMavenProject(IProgressMonitor monitor)
            throws CoreException {
        return getMavenProjectFacade().getMavenProject( monitor );
    }

    private <T> T getMojoParameterValue(String name, Class<T> type,
            IProgressMonitor monitor) throws CoreException {
        return maven.getMojoParameterValue(getMavenProject(monitor),
                getMojoExecution(), name, type, monitor);
    }
}
