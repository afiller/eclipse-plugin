package com.vaadin.integration.eclipse.maven;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;

import org.apache.maven.model.Build;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.MojoExecution;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.Scanner;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.m2e.core.MavenPlugin;
import org.eclipse.m2e.core.embedder.IMaven;
import org.eclipse.m2e.core.project.configurator.MojoExecutionBuildParticipant;
import org.sonatype.plexus.build.incremental.BuildContext;

import com.vaadin.integration.eclipse.VaadinPlugin;
import com.vaadin.integration.eclipse.preferences.PreferenceConstants;

/**
 * An m2e build participant that automatically triggers the execution of
 * appropriate vaadin-maven-plugin goals on resource changes (Eclipse builds)
 * and refreshes possibly changed resources after each mojo execution.
 * 
 * This class is called once for every Vaadin mojo execution in a build.
 * 
 * The POM file in the project can override the use of the configurator that
 * triggers this build participant either by omitting an execution entry to
 * disable this or by explicitly defining another action for one or more of the
 * goals in the m2e configuration in the pluginManagement section.
 */
public class VaadinMojoExecutionBuildParticipant extends
        MojoExecutionBuildParticipant {
    private static final String COMPILE_WIDGETSET_GOAL = "compile";
    private static final String WS_UPDATED_FILE = "ws-updated";
    private static final String UPDATE_THEME_GOAL = "update-theme";
    private static final String COMPILE_THEME_GOAL = "compile-theme";
    private static final String UPDATE_WIDGETSET_GOAL = "update-widgetset";

    private static final String RELATIVE_THEME_DIRECTORY = "VAADIN/themes";
    private static final String GENERATED_WIDGETSET_DIRECTORY_PARAMETER = "generatedWidgetsetDirectory";

    private static final IMaven maven = MavenPlugin.getMaven();

    public VaadinMojoExecutionBuildParticipant(MojoExecution execution) {
        super(execution, true);
    }

    @Override
    public Set<IProject> build(int kind, IProgressMonitor monitor)
            throws Exception {
        BuildContext buildContext = getBuildContext();

        String operation = "";
        if (isGoal(UPDATE_THEME_GOAL)) {
            operation = "Updating Vaadin themes";
        } else if (isGoal(COMPILE_THEME_GOAL)) {
            operation = "Compiling Vaadin themes";
        } else if (isGoal(UPDATE_WIDGETSET_GOAL)) {
            operation = "Updating Vaadin widgetsets";
        } else if (isGoal(COMPILE_WIDGETSET_GOAL)) {
            operation = "Compiling Vaadin widgetsets";
        }

        Set<IProject> result = Collections.emptySet();
        try {
            monitor.beginTask(operation, 10);

            // skip executing the goal if no relevant files have changed
            if (!appliesToGoal(kind, buildContext, new SubProgressMonitor(
                    monitor, 1))) {
                return null;
            }

            // execute mojo
            result = super.build(kind, new SubProgressMonitor(
                    monitor, 7));

            // refresh files generated by the mojo
            refreshTarget(buildContext, new SubProgressMonitor(monitor, 2));
        } finally {
            monitor.done();
        }

        return result;
    }

    private boolean appliesToGoal(int kind, BuildContext buildContext,
            IProgressMonitor monitor) throws CoreException {
        try {
            monitor.beginTask("Check if Maven task applies to a goal", 2);

            if (isGoal(UPDATE_THEME_GOAL) || isGoal(COMPILE_THEME_GOAL)) {
                for (File themeDir : getThemeDirectories(new SubProgressMonitor(
                        monitor, 2))) {
                    if (themeDir.exists()
                            && scanDirectory(buildContext, themeDir, null)) {
                        return true;
                    }
                }
                return false;
            } else if (!isGoal(UPDATE_WIDGETSET_GOAL)
                    && !isGoal(COMPILE_WIDGETSET_GOAL)) {
                return false;
            }

            if (isGoal(UPDATE_WIDGETSET_GOAL)) {
                // a full build may have dependency changes
                if (kind == FULL_BUILD || kind == PRECONFIGURE_BUILD) {
                    return true;
                } else if (kind == AUTO_BUILD) {
                    // trigger if dependencies change - other cases below
                    if (buildContext.hasDelta("pom.xml")) {
                        return true;
                    } else {
                        File wsUpdateFile = new File(getMavenProjectFacade()
                                .getMavenProject().getBuild().getDirectory(),
                                WS_UPDATED_FILE);
                        if (!wsUpdateFile.exists()) {
                            try {
                                buildContext.newFileOutputStream(wsUpdateFile)
                                        .close();
                                buildContext.refresh(wsUpdateFile);
                            } catch (IOException e) {
                                // Could not create ws-updated file, might
                                // result in
                                // running update-widgetset multiple times.
                            }
                            return true;
                        }
                    }
                }
            } else if (isGoal(COMPILE_WIDGETSET_GOAL)) {
                boolean automaticBuildsEnabled = VaadinPlugin
                        .getInstance()
                        .getPreferenceStore()
                        .getBoolean(
                                PreferenceConstants.MAVEN_WIDGETSET_AUTOMATIC_BUILD_ENABLED);

                if (!automaticBuildsEnabled) {
                    return false;
                }

                if (!(kind == PRECONFIGURE_BUILD || kind == AUTO_BUILD || kind == FULL_BUILD)) {
                    // Skip clean builds and incremental builds
                    return false;
                }

                File wsFolder = getMojoParameterValue("webappDirectory",
                        File.class, new SubProgressMonitor(monitor, 1));
                if (wsFolder != null && !wsFolder.exists()) {
                    return true;
                } else if (buildContext.hasDelta("pom.xml")) {
                    return true;
                }
            }

            // Applies to update and compile widgetset
            // otherwise, only scan for changes in .gwt.xml files
            for (File resourceDir : getUpdateWidgetsetTriggerDirectories(new SubProgressMonitor(
                    monitor, 1))) {
                if (resourceDir.exists()
                        && scanDirectory(buildContext, resourceDir,
                                "**/*.gwt.xml")) {
                    return true;
                }
            }
        } finally {
            monitor.done();
        }

        return false;
    }

    private boolean scanDirectory(BuildContext buildContext, File source,
            String filter) {
        // scan the source directory for applicable files
        Scanner ds = buildContext.newScanner(source); // delta or full
        if (filter != null) {
            ds.setIncludes(new String[] { filter });
        }
        ds.scan();
        String[] includedFiles = ds.getIncludedFiles();
        if (includedFiles == null || includedFiles.length <= 0) {
            return false;
        }
        return true;
    }

    private boolean isGoal(String goal) {
        return goal.equals(getMojoExecution().getGoal());
    }

    private void refreshTarget(BuildContext buildContext,
            IProgressMonitor monitor) throws CoreException {
        // monitor is used at most once and this is fast, so can just pass it on

        if (isGoal(UPDATE_THEME_GOAL) || isGoal(COMPILE_THEME_GOAL)) {
            for (File themeDir : getThemeDirectories(monitor)) {
                if (themeDir != null && themeDir.exists()) {
                    buildContext.refresh(themeDir);
                }
            }
        } else if (isGoal(UPDATE_WIDGETSET_GOAL)) {
            // refresh locations where the updated widgetset might have been
            // written
            for (File refreshable : getUpdateWidgetsetRefreshables(monitor)) {
                if (refreshable != null && refreshable.exists()) {
                    buildContext.refresh(refreshable);
                }
            }
        } else if (isGoal(COMPILE_WIDGETSET_GOAL)) {
            File webappDirectory = getMojoParameterValue("webappDirectory",
                    File.class, monitor);
            if (webappDirectory != null && webappDirectory.exists()) {
                buildContext.refresh(webappDirectory);
            }
        }
    }

    private Collection<File> getThemeDirectories(IProgressMonitor monitor)
            throws CoreException {
        // monitor is used at most once and this is fast, so can just pass it on

        ArrayList<File> result = new ArrayList<File>();

        MavenProject project = getMavenProject(monitor);
        File basedir = project.getBasedir();
        Build build = project.getBuild();

        result.add(new File(basedir, "src/main/webapp/"
                + RELATIVE_THEME_DIRECTORY));
        for (Resource resource : build.getResources()) {
            result.add(new File(resource.getDirectory(),
                    RELATIVE_THEME_DIRECTORY));
        }
        result.add(new File(build.getSourceDirectory(),
                RELATIVE_THEME_DIRECTORY));

        return result;
    }

    private Collection<File> getUpdateWidgetsetTriggerDirectories(
            IProgressMonitor monitor) throws CoreException {
        // monitor is used at most once and this is fast, so can just pass it on

        ArrayList<File> result = new ArrayList<File>();

        MavenProject project = getMavenProject(monitor);
        Build build = project.getBuild();

        result.add(new File(build.getSourceDirectory()));
        for (Resource resource : build.getResources()) {
            result.add(new File(resource.getDirectory(), ""));
        }

        return result;
    }

    private Collection<File> getUpdateWidgetsetRefreshables(
            IProgressMonitor monitor) throws CoreException {
        Collection<File> result = Collections.emptyList();
        try {
            monitor.beginTask("List directories to update", 2);

            result = getUpdateWidgetsetTriggerDirectories(new SubProgressMonitor(
                    monitor, 1));

            File generatedWidgetsetDirectory = getMojoParameterValue(
                    GENERATED_WIDGETSET_DIRECTORY_PARAMETER, File.class,
                    new SubProgressMonitor(monitor, 1));
            if (generatedWidgetsetDirectory != null
                    && generatedWidgetsetDirectory.exists()) {
                result.add(generatedWidgetsetDirectory);
            }
        } finally {
            monitor.done();
        }

        return result;
    }

    private MavenProject getMavenProject(IProgressMonitor monitor)
            throws CoreException {
        return getMavenProjectFacade().getMavenProject(monitor);
    }

    private <T> T getMojoParameterValue(String name, Class<T> type,
            IProgressMonitor monitor) throws CoreException {
        try {
            monitor.beginTask("Get Maven plug-in parameter value", 2);

            MavenProject mavenProject = getMavenProject(new SubProgressMonitor(
                    monitor, 1));
            return maven.getMojoParameterValue(mavenProject,
                    getMojoExecution(), name, type, new SubProgressMonitor(
                            monitor, 1));
        } finally {
            monitor.done();
        }
    }
}
